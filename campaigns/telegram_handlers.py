import json
import requests
import re
import time
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_POST
from .models import Campaign, Participant
import os
from dotenv import load_dotenv

load_dotenv()


@csrf_exempt
@require_POST
def telegram_webhook(request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞ Telegram (—Å–æ–æ–±—â–µ–Ω–∏—è –∏ callback-–∏)"""
    try:
        active_campaign = Campaign.objects.filter(status='active', bot_is_running=True).first()
        if not active_campaign:
            return JsonResponse({'ok': True})

        update = json.loads(request.body)
        print(f"üì® –ü–æ–ª—É—á–µ–Ω update: {json.dumps(update, indent=2, ensure_ascii=False)}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

        # üîπ 1. Callback –æ—Ç inline –∫–Ω–æ–ø–∫–∏
        if 'callback_query' in update:
            callback = update['callback_query']
            data = callback.get('data')
            chat_id = callback['message']['chat']['id']
            user_id = callback['from']['id']
            message_id = callback['message']['message_id']
            callback_query_id = callback['id']

            participant = Participant.objects.filter(campaign=active_campaign, telegram_id=user_id).first()
            if not participant:
                send_telegram_message(chat_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start")
                answer_callback_query(callback_query_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start")
                return JsonResponse({'ok': True})

            if data == 'check_subscription':
                # üîπ –ü–ï–†–ï–î–ê–ï–ú –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´
                handle_subscription_stage(chat_id, user_id, active_campaign, participant, message_id, callback_query_id)
            else:
                answer_callback_query(callback_query_id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

            return JsonResponse({'ok': True})

        # üîπ 2. –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if 'message' not in update:
            return JsonResponse({'ok': True})

        message = update['message']
        chat_id = message['chat']['id']
        user_id = message['from']['id']
        first_name = message['from'].get('first_name', '')
        username = message['from'].get('username', '')
        text = message.get('text', '')

        print(f"üí¨ Message from {user_id}: {text}")

        if 'contact' in message:
            phone = message['contact'].get('phone_number', '')
            handle_contact(chat_id, user_id, phone, first_name, username, active_campaign)
            return JsonResponse({'ok': True})

        if text == '/start':
            handle_start(chat_id, user_id, first_name, username, active_campaign)
            return JsonResponse({'ok': True})

        handle_user_message(chat_id, user_id, text, first_name, username, active_campaign)

    except Exception as e:
        print(f"‚ùå Error in webhook: {e}")

    return JsonResponse({'ok': True})


def handle_start(chat_id, user_id, first_name, username, campaign):
    """–ù–∞—á–∞–ª–æ –æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º"""
    try:
        # üîπ –ü–†–û–í–ï–†–Ø–ï–ú –ï–°–¢–¨ –õ–ò –£–ñ–ï –ó–ê–í–ï–†–®–ï–ù–ù–ê–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø
        existing_participant = Participant.objects.filter(
            campaign=campaign, 
            telegram_id=user_id,
            registration_stage='completed'
        ).first()
        
        if existing_participant:
            # üîπ –ï–°–õ–ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –£–ñ–ï –ó–ê–í–ï–†–®–ï–ù–ê - –ü–û–ö–ê–ó–´–í–ê–ï–ú –°–¢–ê–¢–£–°
            send_telegram_message(
                chat_id,
                f"üéâ *–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!*\n\n"
                f"‚úÖ –í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞\n"
                f"üë§ –ò–º—è: {existing_participant.first_name}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {existing_participant.phone}\n\n"
                f"–û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞!",
                parse_mode='Markdown'
            )
            return

        # üîπ –ü–†–û–í–ï–†–Ø–ï–ú –ï–°–¢–¨ –õ–ò –ù–ï–ó–ê–í–ï–†–®–ï–ù–ù–ê–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø
        incomplete_participant = Participant.objects.filter(
            telegram_id=user_id,
            campaign=campaign,
            registration_stage__in=['name', 'phone', 'subscription']
        ).first()
        
        if incomplete_participant:
            # üîπ –ï–°–õ–ò –ï–°–¢–¨ –ù–ï–ó–ê–í–ï–†–®–ï–ù–ù–ê–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø - –ü–†–û–î–û–õ–ñ–ê–ï–ú –° –¢–ï–ö–£–©–ï–ô –°–¢–ê–î–ò–ò
            stage = incomplete_participant.registration_stage
            if stage == 'name':
                ask_name(chat_id, incomplete_participant)
            elif stage == 'phone':
                ask_phone(chat_id, incomplete_participant)
            elif stage == 'subscription':
                send_conditions_with_inline_button(chat_id, campaign)
            return

        # üîπ –ï–°–õ–ò –£–ß–ê–°–¢–ù–ò–ö–ê –í–û–û–ë–©–ï –ù–ï–¢ - –ù–ê–ß–ò–ù–ê–ï–ú –ù–û–í–£–Æ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Æ
        welcome_message = campaign.first_message or "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!"
        send_telegram_message(chat_id, welcome_message)

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        participant = Participant.objects.create(
            campaign=campaign,
            telegram_id=user_id,
            username=username,
            first_name=first_name,
            registration_stage='name'
        )

        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –∏–º–µ–Ω–∏
        time.sleep(0.5)
        ask_name(chat_id, participant)

    except Exception as e:
        print(f"‚ùå Error in handle_start: {e}")
        send_telegram_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


def ask_name(chat_id, participant):
    """–ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏"""
    send_telegram_message(
        chat_id,
        "üìù *–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?*\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:",
        {'remove_keyboard': True},
        parse_mode='Markdown'
    )


def handle_user_message(chat_id, user_id, text, first_name, username, campaign):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Å—Ç–∞–¥–∏—è–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    participant = Participant.objects.filter(campaign=campaign, telegram_id=user_id).first()
    
    if not participant:
        send_telegram_message(chat_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
        return

    # üîπ –ï–°–õ–ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –£–ñ–ï –ó–ê–í–ï–†–®–ï–ù–ê - –ü–û–ö–ê–ó–´–í–ê–ï–ú –°–¢–ê–¢–£–°
    if participant.registration_stage == 'completed':
        send_telegram_message(
            chat_id,
            f"üéâ *–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!*\n\n"
            f"‚úÖ –í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞\n"
            f"üë§ –ò–º—è: {participant.first_name}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {participant.phone}\n\n"
            f"–û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞!",
            parse_mode='Markdown'
        )
        return

    stage = participant.registration_stage
    print(f"üéØ Stage for user {user_id}: {stage}")

    if stage == 'name':
        handle_name_stage(chat_id, participant, text)
    elif stage == 'phone':
        handle_phone_stage(chat_id, campaign, participant, text)
    elif stage == 'subscription':
        if text == (campaign.conditions_button or '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'):
            handle_subscription_stage(chat_id, user_id, campaign, participant, None, None)
        else:
            send_telegram_message(
                chat_id,
                f"‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '{campaign.conditions_button or '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'}'"
            )


def handle_name_stage(chat_id, participant, text):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω"""
    if not text.strip():
        send_telegram_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        return

    participant.first_name = text.strip()
    participant.registration_stage = 'phone'
    participant.save()
    
    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    time.sleep(0.5)
    ask_phone(chat_id, participant)


def ask_phone(chat_id, participant):
    """–ó–∞–ø—Ä–æ—Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    keyboard = {
        'keyboard': [[{'text': participant.campaign.share_phone_button or 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º', 'request_contact': True}]],
        'resize_keyboard': True,
        'one_time_keyboard': True
    }
    send_telegram_message(
        chat_id,
        f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {participant.first_name}! üì± *–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:",
        keyboard,
        parse_mode='Markdown'
    )


def handle_phone_stage(chat_id, campaign, participant, text):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏—è –∞–∫—Ü–∏–∏ —Å inline –∫–Ω–æ–ø–∫–æ–π"""
    if not text.strip():
        send_telegram_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:")
        return

    # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —Ñ–æ—Ä–º–∞—Ç—É +7...
    phone = re.sub(r'[^\d+]', '', text.strip())
    if phone.startswith('8'):
        phone = '+7' + phone[1:]
    elif not phone.startswith('+'):
        phone = '+' + phone

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –Ω–æ–º–µ—Ä–∞
    if len(phone) < 11:
        send_telegram_message(chat_id, "‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä:")
        return

    participant.phone = phone
    participant.registration_stage = 'subscription'
    participant.save()

    # üîπ –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    remove_keyboard = {"remove_keyboard": True}
    send_telegram_message(chat_id, "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:", reply_markup=remove_keyboard)

    # üîπ –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É—Å–ª–æ–≤–∏–π
    time.sleep(0.5)
    
    # üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏—è —Å inline-–∫–Ω–æ–ø–∫–æ–π
    send_conditions_with_inline_button(chat_id, campaign)


def handle_contact(chat_id, user_id, phone, first_name, username, campaign):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ Telegram"""
    participant = Participant.objects.filter(campaign=campaign, telegram_id=user_id).first()
    if not participant:
        send_telegram_message(chat_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start")
        return

    participant.phone = re.sub(r'[^\d+]', '', phone)
    participant.registration_stage = 'subscription'
    participant.save()

    # üîπ –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    remove_keyboard = {"remove_keyboard": True}
    send_telegram_message(chat_id, "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:", reply_markup=remove_keyboard)

    # üîπ –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É—Å–ª–æ–≤–∏–π
    time.sleep(0.5)
    
    # üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏—è –∞–∫—Ü–∏–∏ —Å inline –∫–Ω–æ–ø–∫–æ–π
    send_conditions_with_inline_button(chat_id, campaign)


def send_conditions_with_inline_button(chat_id, campaign):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —É—Å–ª–æ–≤–∏–π –∞–∫—Ü–∏–∏ –∏ inline –∫–Ω–æ–ø–∫—É - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    try:
        # –ü—Ä–æ—Å—Ç–æ –±–µ—Ä–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –µ—Å—Ç—å, –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        conditions_text = campaign.conditions_text
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π
        if not conditions_text or conditions_text.strip() == "":
            conditions_text = "üìã –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏."
        
        # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        button_text = campaign.conditions_button or "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
        
        inline_keyboard = {
            "inline_keyboard": [
                [{"text": button_text, "callback_data": "check_subscription"}]
            ]
        }
        
        print(f"üìã Sending conditions to {chat_id}")
        print(f"üìù Conditions text: {conditions_text}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ë–ï–ó Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        send_telegram_message(
            chat_id,
            conditions_text,
            reply_markup=inline_keyboard,
            parse_mode=None  # –í–∞–∂–Ω–æ: –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        )
            
    except Exception as e:
        print(f"‚ùå Error in send_conditions_with_inline_button: {e}")
        # –§–æ–ª–±—ç–∫ - –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        send_telegram_message(
            chat_id,
            "üìã –î–ª—è —É—á–∞—Å—Ç–∏—è –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏:",
            reply_markup={
                "inline_keyboard": [
                    [{"text": "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "callback_data": "check_subscription"}]
                ]
            }
        )


def handle_subscription_stage(chat_id, user_id, campaign, participant, message_id=None, callback_query_id=None):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        print(f"üîç Checking subscription for user {user_id}")
        is_subscribed, failed_channels = check_user_subscription(user_id, campaign)

        if is_subscribed:
            participant.is_subscribed = True
            participant.registration_stage = 'completed'
            participant.save()
            
            print(f"‚úÖ User {user_id} successfully subscribed")
            
            # üîπ –ï—Å–ª–∏ —ç—Ç–æ callback, –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –Ω–µ–≥–æ
            if callback_query_id:
                answer_callback_query(callback_query_id, "üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            
            success_message = (
                f"üéâ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
                f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
                f"üë§ –ò–º—è: {participant.first_name}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {participant.phone}"
            )
            
            # üîπ –ï—Å–ª–∏ –µ—Å—Ç—å message_id, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if message_id:
                edit_message_with_inline_button(
                    chat_id, message_id, success_message, 
                    None, 'Markdown'  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                )
            else:
                send_telegram_message(chat_id, success_message, parse_mode='Markdown')
                
        else:
            print(f"‚ùå User {user_id} not subscribed to: {failed_channels}")
            failed_text = "\n".join([f"‚Ä¢ {ch}" for ch in failed_channels])
            inline_keyboard = {
                "inline_keyboard": [
                    [{"text": "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "callback_data": "check_subscription"}]
                ]
            }
            
            error_message = (
                f"‚ùå *–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!*\n\n"
                f"–ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã:\n{failed_text}\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞:"
            )
            
            # üîπ –û–¢–í–ï–ß–ê–ï–ú –ù–ê CALLBACK, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
            if callback_query_id:
                answer_callback_query(callback_query_id, "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã")
            
            # üîπ –ï—Å–ª–∏ –µ—Å—Ç—å message_id, –†–ï–î–ê–ö–¢–ò–†–£–ï–ú —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if message_id:
                edit_message_with_inline_button(
                    chat_id, message_id, error_message,
                    inline_keyboard, 'Markdown'
                )
            else:
                send_telegram_message(
                    chat_id, error_message,
                    reply_markup=inline_keyboard, parse_mode='Markdown'
                )
            
    except Exception as e:
        print(f"‚ùå Error in handle_subscription_stage: {e}")
        if callback_query_id:
            answer_callback_query(callback_query_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


def check_user_subscription(user_id, campaign):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª—ã"""
    bot_token = os.getenv("BOT_TOKEN")
    channels = [ch.strip() for ch in campaign.channel_usernames.split(',') if ch.strip()]
    failed_channels = []

    print(f"üîç Checking {len(channels)} channels for user {user_id}")

    for channel in channels:
        if not channel.startswith('@'):
            channel = '@' + channel
            
        url = f"https://api.telegram.org/bot{bot_token}/getChatMember"
        try:
            print(f"  üîé Checking channel: {channel}")
            response = requests.get(url, params={'chat_id': channel, 'user_id': user_id}, timeout=10)
            data = response.json()
            
            print(f"  üìä Response for {channel}: {data}")
            
            if data.get('ok'):
                status = data['result']['status']
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω
                if status in ['member', 'administrator', 'creator']:
                    print(f"  ‚úÖ Subscribed to {channel}")
                    continue  # –ü–æ–¥–ø–∏—Å–∞–Ω - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–∞–Ω–∞–ª—É
                else:
                    print(f"  ‚ùå Not subscribed to {channel}, status: {status}")
            else:
                print(f"  ‚ùå API error for {channel}: {data}")
                
            failed_channels.append(channel)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {channel}: {e}")
            failed_channels.append(channel)

    print(f"üìä Subscription result: {len(failed_channels)} failed channels")
    return len(failed_channels) == 0, failed_channels


def send_telegram_message(chat_id, text, reply_markup=None, parse_mode=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    bot_token = os.getenv("BOT_TOKEN")
    data = {'chat_id': chat_id, 'text': text}
    if reply_markup:
        data['reply_markup'] = json.dumps(reply_markup)
    if parse_mode:
        data['parse_mode'] = parse_mode
    
    print(f"üì§ Sending message to {chat_id}")
    print(f"üìù Text preview: {text[:100]}...")
    if reply_markup:
        print(f"üõú Reply markup: {reply_markup}")
    
    try:
        response = requests.post(
            f'https://api.telegram.org/bot{bot_token}/sendMessage', 
            data=data, 
            timeout=10
        )
        
        if response.status_code != 200:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Telegram API: {response.status_code} - {response.text}")
            return response
            
        print(f"‚úÖ Message sent successfully")
        return response
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return None


def answer_callback_query(callback_query_id, text):
    """–û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query (—É–±–∏—Ä–∞–µ—Ç —á–∞—Å–∏–∫–∏)"""
    bot_token = os.getenv("BOT_TOKEN")
    data = {
        'callback_query_id': callback_query_id,
        'text': text,
        'show_alert': False
    }
    try:
        print(f"üîî Answering callback: {text}")
        response = requests.post(f'https://api.telegram.org/bot{bot_token}/answerCallbackQuery', data=data, timeout=10)
        if response.status_code != 200:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: {response.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: {e}")


def edit_message_with_inline_button(chat_id, message_id, text, reply_markup=None, parse_mode=None):
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–Ω–æ–ø–∫–æ–π"""
    bot_token = os.getenv("BOT_TOKEN")
    data = {
        'chat_id': chat_id,
        'message_id': message_id,
        'text': text
    }
    if reply_markup:
        data['reply_markup'] = json.dumps(reply_markup)
    if parse_mode:
        data['parse_mode'] = parse_mode
    
    print(f"‚úèÔ∏è Editing message {message_id} in chat {chat_id}")
    
    try:
        response = requests.post(f'https://api.telegram.org/bot{bot_token}/editMessageText', data=data, timeout=10)
        if response.status_code != 200:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {response.status_code} - {response.text}")
            return False
        print(f"‚úÖ Message edited successfully")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False


def delete_message(chat_id, message_id):
    """–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    bot_token = os.getenv("BOT_TOKEN")
    data = {
        'chat_id': chat_id,
        'message_id': message_id
    }
    try:
        print(f"üóëÔ∏è Deleting message {message_id} from chat {chat_id}")
        response = requests.post(f'https://api.telegram.org/bot{bot_token}/deleteMessage', data=data, timeout=10)
        if response.status_code != 200:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {response.text}")
        else:
            print(f"‚úÖ Message deleted successfully")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")