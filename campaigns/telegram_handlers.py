import json
import requests
import re
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_POST
from .models import Campaign, Participant
import os
from dotenv import load_dotenv

load_dotenv()


@csrf_exempt
@require_POST
def telegram_webhook(request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞ Telegram (—Å–æ–æ–±—â–µ–Ω–∏—è –∏ callback-–∏)"""
    try:
        active_campaign = Campaign.objects.filter(status='active', bot_is_running=True).first()
        if not active_campaign:
            return JsonResponse({'ok': True})

        update = json.loads(request.body)

        # üîπ 1. Callback –æ—Ç inline –∫–Ω–æ–ø–∫–∏
        if 'callback_query' in update:
            callback = update['callback_query']
            data = callback.get('data')
            chat_id = callback['message']['chat']['id']
            user_id = callback['from']['id']
            message_id = callback['message']['message_id']  # üîπ –î–û–ë–ê–í–õ–Ø–ï–ú
            callback_query_id = callback['id']  # üîπ –î–û–ë–ê–í–õ–Ø–ï–ú

            participant = Participant.objects.filter(campaign=active_campaign, telegram_id=user_id).first()
            if not participant:
                send_telegram_message(chat_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start")
                answer_callback_query(callback_query_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start")
                return JsonResponse({'ok': True})

            if data == 'check_subscription':
                # üîπ –ü–ï–†–ï–î–ê–ï–ú –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´
                handle_subscription_stage(chat_id, user_id, active_campaign, participant, message_id, callback_query_id)

            return JsonResponse({'ok': True})

        # üîπ 2. –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if 'message' not in update:
            return JsonResponse({'ok': True})

        message = update['message']
        chat_id = message['chat']['id']
        user_id = message['from']['id']
        first_name = message['from'].get('first_name', '')
        username = message['from'].get('username', '')
        text = message.get('text', '')

        if 'contact' in message:
            phone = message['contact'].get('phone_number', '')
            handle_contact(chat_id, user_id, phone, first_name, username, active_campaign)
            return JsonResponse({'ok': True})

        if text == '/start':
            handle_start(chat_id, user_id, first_name, username, active_campaign)
            return JsonResponse({'ok': True})

        handle_user_message(chat_id, user_id, text, first_name, username, active_campaign)

    except Exception as e:
        print(f"‚ùå Error in webhook: {e}")

    return JsonResponse({'ok': True})


def handle_start(chat_id, user_id, first_name, username, campaign):
    """–ù–∞—á–∞–ª–æ –æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º"""
    try:
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        send_telegram_message(chat_id, campaign.first_message or "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!")

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        Participant.objects.filter(
            telegram_id=user_id,
            campaign=campaign,
            registration_stage__in=['name', 'phone', 'subscription']
        ).delete()

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        participant = Participant.objects.create(
            campaign=campaign,
            telegram_id=user_id,
            username=username,
            first_name=first_name,
            registration_stage='name'
        )

        ask_name(chat_id, participant)

    except Exception as e:
        print(f"‚ùå Error in handle_start: {e}")
        send_telegram_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


def ask_name(chat_id, participant):
    """–ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏"""
    send_telegram_message(
        chat_id,
        "üìù *–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?*\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:",
        {'remove_keyboard': True},
        parse_mode='Markdown'
    )


def handle_user_message(chat_id, user_id, text, first_name, username, campaign):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Å—Ç–∞–¥–∏—è–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    participant = Participant.objects.filter(campaign=campaign, telegram_id=user_id).first()
    if not participant:
        send_telegram_message(chat_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
        return

    stage = participant.registration_stage

    if stage == 'name':
        handle_name_stage(chat_id, participant, text)
    elif stage == 'phone':
        handle_phone_stage(chat_id, campaign, participant, text)
    elif stage == 'subscription':
        if text == (campaign.conditions_button or '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'):
            # üîπ –ü–ï–†–ï–î–ê–ï–ú None –¥–ª—è message_id –∏ callback_query_id –ø—Ä–∏ –æ–±—ã—á–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            handle_subscription_stage(chat_id, user_id, campaign, participant, None, None)
        else:
            send_telegram_message(
                chat_id,
                f"‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '{campaign.conditions_button or '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'}'"
            )


def handle_name_stage(chat_id, participant, text):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω"""
    if not text.strip():
        send_telegram_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        return

    participant.first_name = text.strip()
    participant.registration_stage = 'phone'
    participant.save()
    ask_phone(chat_id, participant)


def ask_phone(chat_id, participant):
    """–ó–∞–ø—Ä–æ—Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    keyboard = {
        'keyboard': [[{'text': participant.campaign.share_phone_button or 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º', 'request_contact': True}]],
        'resize_keyboard': True
    }
    send_telegram_message(
        chat_id,
        f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {participant.first_name}! üì± *–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:",
        keyboard,
        parse_mode='Markdown'
    )


def handle_phone_stage(chat_id, campaign, participant, text):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏—è –∞–∫—Ü–∏–∏ —Å inline –∫–Ω–æ–ø–∫–æ–π"""
    if not text.strip():
        send_telegram_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:")
        return

    # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —Ñ–æ—Ä–º–∞—Ç—É +7...
    phone = re.sub(r'[^\d+]', '', text.strip())
    if phone.startswith('8'):
        phone = '+7' + phone[1:]
    elif not phone.startswith('+'):
        phone = '+' + phone

    participant.phone = phone
    participant.registration_stage = 'subscription'
    participant.save()

    # üîπ –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    remove_keyboard = {"remove_keyboard": True}
    send_telegram_message(chat_id, "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:", reply_markup=remove_keyboard)

    # üîπ –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É—Å–ª–æ–≤–∏–π
    import time
    time.sleep(0.5)
    
    # üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏—è —Å inline-–∫–Ω–æ–ø–∫–æ–π
    send_conditions_with_inline_button(chat_id, campaign)


def handle_contact(chat_id, user_id, phone, first_name, username, campaign):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ Telegram"""
    participant = Participant.objects.filter(campaign=campaign, telegram_id=user_id).first()
    if not participant:
        send_telegram_message(chat_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start")
        return

    participant.phone = re.sub(r'[^\d+]', '', phone)
    participant.registration_stage = 'subscription'
    participant.save()

    # üîπ –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    remove_keyboard = {"remove_keyboard": True}
    send_telegram_message(chat_id, "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:", reply_markup=remove_keyboard)

    # üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏—è –∞–∫—Ü–∏–∏ —Å inline –∫–Ω–æ–ø–∫–æ–π
    send_conditions_with_inline_button(chat_id, campaign)


def send_conditions_with_inline_button(chat_id, campaign):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —É—Å–ª–æ–≤–∏–π –∞–∫—Ü–∏–∏ –∏ inline –∫–Ω–æ–ø–∫—É"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç —É—Å–ª–æ–≤–∏–π
    conditions_text = campaign.conditions_text
    if not conditions_text or conditions_text.strip() == "":
        conditions_text = "üìã *–£—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ:*\n\n–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è."
    
    inline_keyboard = {
        "inline_keyboard": [
            [{"text": campaign.conditions_button or "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "callback_data": "check_subscription"}]
        ]
    }
    
    send_telegram_message(
        chat_id,
        conditions_text,
        reply_markup=inline_keyboard,
        parse_mode='Markdown'
    )


def handle_subscription_stage(chat_id, user_id, campaign, participant, message_id=None, callback_query_id=None):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    is_subscribed, failed_channels = check_user_subscription(user_id, campaign)

    if is_subscribed:
        participant.is_subscribed = True
        participant.registration_stage = 'completed'
        participant.save()
        
        # üîπ –ï—Å–ª–∏ —ç—Ç–æ callback, –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –Ω–µ–≥–æ
        if callback_query_id:
            answer_callback_query(callback_query_id, "üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        send_telegram_message(
            chat_id,
            f"üéâ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\nüë§ –ò–º—è: {participant.first_name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {participant.phone}",
            parse_mode='Markdown'
        )
        
        # üîπ –ï—Å–ª–∏ –µ—Å—Ç—å message_id, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        if message_id:
            delete_message(chat_id, message_id)
            
    else:
        failed_text = "\n".join([f"‚Ä¢ {ch}" for ch in failed_channels])
        inline_keyboard = {
            "inline_keyboard": [
                [{"text": "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "callback_data": "check_subscription"}]
            ]
        }
        
        # üîπ –û–¢–í–ï–ß–ê–ï–ú –ù–ê CALLBACK, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
        if callback_query_id:
            answer_callback_query(callback_query_id, "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã")
        
        # üîπ –ï—Å–ª–∏ –µ—Å—Ç—å message_id, –†–ï–î–ê–ö–¢–ò–†–£–ï–ú —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if message_id:
            edit_message_with_inline_button(
                chat_id, 
                message_id, 
                f"‚ùå *–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!*\n\n–ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã:\n{failed_text}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞:",
                inline_keyboard,
                parse_mode='Markdown'
            )
        else:
            # üîπ –ï—Å–ª–∏ –Ω–µ—Ç message_id (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –æ–±—ã—á–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            send_telegram_message(
                chat_id,
                f"‚ùå *–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!*\n\n–ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã:\n{failed_text}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞:",
                reply_markup=inline_keyboard,
                parse_mode='Markdown'
            )


def check_user_subscription(user_id, campaign):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª—ã"""
    bot_token = os.getenv("BOT_TOKEN")
    channels = [ch.strip() for ch in campaign.channel_usernames.split(',') if ch.strip()]
    failed_channels = []

    for channel in channels:
        if not channel.startswith('@'):
            channel = '@' + channel
        
        url = f"https://api.telegram.org/bot{bot_token}/getChatMember"
        try:
            response = requests.get(url, params={'chat_id': channel, 'user_id': user_id}, timeout=10)
            data = response.json()
            
            # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
            if data.get('ok'):
                status = data['result']['status']
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω
                if status in ['member', 'administrator', 'creator']:
                    continue  # –ü–æ–¥–ø–∏—Å–∞–Ω - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–∞–Ω–∞–ª—É
                
            failed_channels.append(channel)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {channel}: {e}")
            failed_channels.append(channel)

    return len(failed_channels) == 0, failed_channels


def send_telegram_message(chat_id, text, reply_markup=None, parse_mode=None):
    bot_token = os.getenv("BOT_TOKEN")
    data = {'chat_id': chat_id, 'text': text}
    if reply_markup:
        data['reply_markup'] = json.dumps(reply_markup)
    if parse_mode:
        data['parse_mode'] = parse_mode
    try:
        response = requests.post(f'https://api.telegram.org/bot{bot_token}/sendMessage', data=data)
        if response.status_code != 200:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Telegram: {response.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")



def answer_callback_query(callback_query_id, text):
    """–û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query (—É–±–∏—Ä–∞–µ—Ç —á–∞—Å–∏–∫–∏)"""
    bot_token = os.getenv("BOT_TOKEN")
    data = {
        'callback_query_id': callback_query_id,
        'text': text,
        'show_alert': False
    }
    try:
        requests.post(f'https://api.telegram.org/bot{bot_token}/answerCallbackQuery', data=data)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: {e}")


def edit_message_with_inline_button(chat_id, message_id, text, reply_markup=None, parse_mode=None):
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–Ω–æ–ø–∫–æ–π"""
    bot_token = os.getenv("BOT_TOKEN")
    data = {
        'chat_id': chat_id,
        'message_id': message_id,
        'text': text
    }
    if reply_markup:
        data['reply_markup'] = json.dumps(reply_markup)
    if parse_mode:
        data['parse_mode'] = parse_mode
    
    try:
        requests.post(f'https://api.telegram.org/bot{bot_token}/editMessageText', data=data)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


def delete_message(chat_id, message_id):
    """–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    bot_token = os.getenv("BOT_TOKEN")
    data = {
        'chat_id': chat_id,
        'message_id': message_id
    }
    try:
        requests.post(f'https://api.telegram.org/bot{bot_token}/deleteMessage', data=data)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")