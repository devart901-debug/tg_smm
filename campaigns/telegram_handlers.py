import json
import requests
import re
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_POST
from .models import Campaign, Participant
import os
from dotenv import load_dotenv
load_dotenv()

@csrf_exempt
@require_POST
def telegram_webhook(request):
    """–í–µ–±—Ö—É–∫ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
    try:
        # –ü–†–û–í–ï–†–Ø–ï–ú –ï–°–¢–¨ –õ–ò –ê–ö–¢–ò–í–ù–´–ï –ö–ê–ú–ü–ê–ù–ò–ò –° –ó–ê–ü–£–©–ï–ù–ù–´–ú –ë–û–¢–û–ú
        active_campaign = Campaign.objects.filter(
            status='active', 
            bot_is_running=True
        ).first()
        
        if not active_campaign:
            print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π —Å –∑–∞–ø—É—â–µ–Ω–Ω—ã–º –±–æ—Ç–æ–º")
            return JsonResponse({'ok': True})  # –í—Å–µ —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200 –¥–ª—è Telegram
        
        update = json.loads(request.body)
        print(f"üîÑ Received update –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏: {active_campaign.name}")
        
        if 'message' in update:
            message = update['message']
            chat_id = message['chat']['id']
            text = message.get('text', '')
            user_id = message['from']['id']
            first_name = message['from'].get('first_name', '')
            username = message['from'].get('username', '')
            
            print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {first_name}: {text}")
            
            # –ü–µ—Ä–µ–¥–∞–µ–º active_campaign –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            if text == '/start':
                handle_start(chat_id, user_id, first_name, username, active_campaign)
            elif text == 'üéØ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ':
                handle_participate(chat_id, user_id, first_name, username, active_campaign)
            else:
                handle_user_message(chat_id, user_id, text, first_name, username, active_campaign)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–∫–Ω–æ–ø–∫–∞ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º")
        elif 'message' in update and 'contact' in update['message']:
            message = update['message']
            chat_id = message['chat']['id']
            user_id = message['from']['id']
            first_name = message['from'].get('first_name', '')
            username = message['from'].get('username', '')
            contact = message['contact']
            phone = contact.get('phone_number', '')
            
            print(f"üì± –ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç –æ—Ç {first_name}: {phone}")
            handle_contact(chat_id, user_id, phone, first_name, username, active_campaign)
                
    except Exception as e:
        print(f"‚ùå Error: {e}")
    
    return JsonResponse({'ok': True})

def handle_start(chat_id, user_id, first_name, username, campaign):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        keyboard = {
            'keyboard': [
                [{'text': 'üéØ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!'}]
            ],
            'resize_keyboard': True,
            'one_time_keyboard': False
        }
        
        send_telegram_message(
            chat_id, 
            campaign.first_message,
            keyboard
        )
        
        print(f"üîπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name} –Ω–∞—á–∞–ª –æ–±—â–µ–Ω–∏–µ")
        
    except Exception as e:
        print(f"‚ùå Error in handle_start: {e}")
        send_telegram_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

def handle_participate(chat_id, user_id, first_name, username, campaign):
    """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å"""
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        Participant.objects.filter(
            telegram_id=user_id,
            registration_stage__in=['name', 'phone', 'subscription']
        ).delete()

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        participant = Participant.objects.create(
            campaign=campaign,
            telegram_id=user_id,
            username=username,
            first_name=first_name,
            registration_stage='name'
        )
        
        # –ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏
        send_telegram_message(
            chat_id, 
            "üìù *–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?*\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:",
            {'remove_keyboard': True},
            parse_mode='Markdown'
        )
        
        print(f"üîπ –ù–∞—á–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è {first_name}")
        
    except Exception as e:
        print(f"‚ùå Error in handle_participate: {e}")
        send_telegram_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

def handle_user_message(chat_id, user_id, text, first_name, username, campaign):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å—Ç–∞–¥–∏—è–º"""
    try:
        participant = Participant.objects.filter(
            telegram_id=user_id,
            registration_stage__in=['name', 'phone', 'subscription']
        ).first()
        
        if not participant:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
            handle_start(chat_id, user_id, first_name, username, campaign)
            return
        
        print(f"üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è {first_name}, —Å—Ç–∞–¥–∏—è: {participant.registration_stage}")
        
        if participant.registration_stage == 'name':
            handle_name_stage(chat_id, participant, text)
            
        elif participant.registration_stage == 'phone':
            handle_phone_stage(chat_id, campaign, participant, text)
            
        elif participant.registration_stage == 'subscription':
            handle_subscription_stage(chat_id, user_id, campaign, participant, text, first_name)
                    
    except Exception as e:
        print(f"‚ùå Error in handle_user_message: {e}")
        send_telegram_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

def handle_name_stage(chat_id, participant, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    if text.strip():
        participant.first_name = text.strip()
        participant.registration_stage = 'phone'
        participant.save()
        
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–º—è: {text}")
        
        # –ó–∞–ø—Ä–æ—Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –∫–Ω–æ–ø–∫–æ–π
        keyboard = {
            'keyboard': [[
                {'text': 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º', 'request_contact': True}
            ]],
            'resize_keyboard': True
        }
        
        send_telegram_message(
            chat_id, 
            f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {text.strip()}! üì± *–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*\n\n–ù–∞–º –Ω—É–∂–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏ –≤ —Å–ª—É—á–∞–µ –≤—ã–∏–≥—Ä—ã—à–∞.\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:", 
            keyboard,
            parse_mode='Markdown'
        )
    else:
        send_telegram_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

def handle_phone_stage(chat_id, campaign, participant, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    if text == 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º':
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç
        send_telegram_message(
            chat_id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º' –∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä'",
            parse_mode='Markdown'
        )
        return
        
    if text.strip():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone_exists = Participant.objects.filter(
            campaign=campaign,
            phone=text.strip(),
            registration_stage='completed'
        ).exists()
        
        if phone_exists:
            send_telegram_message(
                chat_id,
                "‚ùå –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä:"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
        participant.phone = text.strip()
        participant.registration_stage = 'subscription'
        participant.save()
        
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω: {text}")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∫–∞–Ω–∞–ª—ã
        ask_for_subscription(chat_id, campaign, participant)
    else:
        send_telegram_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:")

def handle_subscription_stage(chat_id, user_id, campaign, participant, text, first_name):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    if text == '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        check_and_complete_registration(chat_id, user_id, campaign, participant, first_name)
    else:
        # –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
        keyboard = {
            'keyboard': [[{'text': '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'}]],
            'resize_keyboard': True
        }
        
        send_telegram_message(
            chat_id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'",
            keyboard
        )

def handle_contact(chat_id, user_id, phone, first_name, username, campaign):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    try:
        participant = Participant.objects.filter(
            telegram_id=user_id,
            registration_stage='phone'
        ).first()
        
        if not participant:
            send_telegram_message(chat_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è")
            return
            
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if phone:
            phone = re.sub(r'[^\d+]', '', phone)
            if not phone.startswith('+'):
                phone = '+' + phone
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone_exists = Participant.objects.filter(
            campaign=campaign,
            phone=phone,
            registration_stage='completed'
        ).exists()
        
        if phone_exists:
            send_telegram_message(
                chat_id,
                "‚ùå –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä:"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
        participant.phone = phone
        participant.registration_stage = 'subscription'
        participant.save()
        
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {phone}")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∫–∞–Ω–∞–ª—ã
        ask_for_subscription(chat_id, campaign, participant)
        
    except Exception as e:
        print(f"‚ùå Error in handle_contact: {e}")
        send_telegram_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞")

def ask_for_subscription(chat_id, campaign, participant):
    """–ó–∞–ø—Ä–æ—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
        channels = [ch.strip() for ch in campaign.channel_usernames.split(',') if ch.strip()]
        channels_text = "\n".join([f"‚Ä¢ {channel}" for channel in channels])
        
        keyboard = {
            'keyboard': [[{'text': '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'}]],
            'resize_keyboard': True
        }
        
        send_telegram_message(
            chat_id,
            f"üì¢ *–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã*\n\n{channels_text}\n\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:",
            keyboard,
            parse_mode='Markdown'
        )
        
        print(f"üîπ –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è {participant.first_name}")
        
    except Exception as e:
        print(f"‚ùå Error in ask_for_subscription: {e}")

def check_and_complete_registration(chat_id, user_id, campaign, participant, first_name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        is_subscribed, failed_channels = check_user_subscription(user_id, campaign)
        
        if is_subscribed:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            participant.is_subscribed = True
            participant.registration_stage = 'completed'
            participant.save()
            
            print(f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {participant.first_name}")
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            keyboard = {
                'keyboard': [
                    [{'text': 'üéØ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ'}]
                ],
                'resize_keyboard': True
            }
            
            send_telegram_message(
                chat_id,
                f"üéâ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\nüë§ –ò–º—è: {participant.first_name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {participant.phone}\n\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏!",
                keyboard,
                parse_mode='Markdown'
            )
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫–∏–µ –∫–∞–Ω–∞–ª—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã
            failed_text = "\n".join([f"‚Ä¢ {channel}" for channel in failed_channels])
            
            keyboard = {
                'keyboard': [[{'text': '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'}]],
                'resize_keyboard': True
            }
            
            send_telegram_message(
                chat_id,
                f"‚ùå *–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!*\n\n–ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã:\n{failed_text}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞:",
                keyboard,
                parse_mode='Markdown'
            )
            
    except Exception as e:
        print(f"‚ùå Error in check_and_complete_registration: {e}")
        send_telegram_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏")

def check_user_subscription(user_id, campaign):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª—ã"""
    bot_token = os.getenv("BOT_TOKEN")
    
    if not campaign.channel_usernames or campaign.channel_usernames.strip() == '@test_channel':
        return True, []
        
    channels = [channel.strip() for channel in campaign.channel_usernames.split(',')]
    
    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã: {channels}")
    
    failed_channels = []
    
    for channel in channels:
        if not channel.startswith('@'):
            channel = '@' + channel
            
        if channel == '@test_channel':
            continue
            
        url = f"https://api.telegram.org/bot{bot_token}/getChatMember"
        params = {'chat_id': channel, 'user_id': user_id}
        
        try:
            response = requests.get(url, params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                
                if data.get('ok'):
                    status = data['result'].get('status')
                    
                    if status in ['member', 'administrator', 'creator']:
                        print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ {channel}")
                    else:
                        print(f"‚ùå –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ {channel}")
                        failed_channels.append(channel)
                else:
                    print(f"üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ {channel}")
                    failed_channels.append(channel)
            else:
                print(f"üåê –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ {channel}")
                failed_channels.append(channel)
                
        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {channel}: {e}")
            failed_channels.append(channel)
    
    return len(failed_channels) == 0, failed_channels

def send_telegram_message(chat_id, text, reply_markup=None, parse_mode=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram Bot API"""
    bot_token = os.getenv("BOT_TOKEN")
    
    url = f'https://api.telegram.org/bot{bot_token}/sendMessage'
    data = {
        'chat_id': chat_id,
        'text': text,
    }
    
    if reply_markup:
        data['reply_markup'] = json.dumps(reply_markup)
    
    if parse_mode:
        data['parse_mode'] = parse_mode
    
    try:
        response = requests.post(url, data=data)
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {text[:50]}...")
        return response.json()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return None