import json
import requests
import re
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_POST
from .models import Campaign, Participant
import os
from dotenv import load_dotenv
load_dotenv()


@csrf_exempt
@require_POST
def telegram_webhook(request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞ Telegram"""
    try:
        active_campaign = Campaign.objects.filter(status='active', bot_is_running=True).first()
        if not active_campaign:
            print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π —Å –∑–∞–ø—É—â–µ–Ω–Ω—ã–º –±–æ—Ç–æ–º")
            return JsonResponse({'ok': True})
        
        update = json.loads(request.body)
        if 'message' in update:
            message = update['message']
            chat_id = message['chat']['id']
            user_id = message['from']['id']
            text = message.get('text', '')
            first_name = message['from'].get('first_name', '')
            username = message['from'].get('username', '')

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –∫–æ–Ω—Ç–∞–∫—Ç
            if 'contact' in message:
                phone = message['contact'].get('phone_number', '')
                handle_contact(chat_id, user_id, phone, first_name, username, active_campaign)
                return JsonResponse({'ok': True})

            # –õ–æ–≥–∏–∫–∞ –∫–æ–º–∞–Ω–¥
            if text == '/start':
                handle_start(chat_id, user_id, first_name, username, active_campaign)
            else:
                handle_user_message(chat_id, user_id, text, first_name, username, active_campaign)

    except Exception as e:
        print(f"‚ùå Error in webhook: {e}")

    return JsonResponse({'ok': True})


def handle_start(chat_id, user_id, first_name, username, campaign):
    """–ù–∞—á–∞–ª–æ –æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        send_telegram_message(
            chat_id,
            campaign.first_message or "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!"
        )
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω—É–ª—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        Participant.objects.filter(
            telegram_id=user_id,
            registration_stage__in=['name', 'phone', 'subscription']
        ).delete()
        participant = Participant.objects.create(
            campaign=campaign,
            telegram_id=user_id,
            username=username,
            first_name=first_name,
            registration_stage='name'
        )
        ask_name(chat_id, participant)
    except Exception as e:
        print(f"‚ùå Error in handle_start: {e}")
        send_telegram_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


def ask_name(chat_id, participant):
    """–ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏"""
    send_telegram_message(
        chat_id,
        "üìù *–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?*\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:",
        {'remove_keyboard': True},
        parse_mode='Markdown'
    )


def handle_user_message(chat_id, user_id, text, first_name, username, campaign):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Å—Ç–∞–¥–∏—è–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    participant = Participant.objects.filter(
        telegram_id=user_id,
        registration_stage__in=['name', 'phone', 'subscription']
    ).first()
    if not participant:
        send_telegram_message(chat_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
        return

    stage = participant.registration_stage
    if stage == 'name':
        handle_name_stage(chat_id, participant, text)
    elif stage == 'phone':
        handle_phone_stage(chat_id, campaign, participant, text)
    elif stage == 'subscription':
        handle_subscription_stage(chat_id, user_id, campaign, participant)


def handle_name_stage(chat_id, participant, text):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω"""
    if not text.strip():
        send_telegram_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        return

    participant.first_name = text.strip()
    participant.registration_stage = 'phone'
    participant.save()
    ask_phone(chat_id, participant)


def ask_phone(chat_id, participant):
    """–ó–∞–ø—Ä–æ—Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    keyboard = {
        'keyboard': [[{'text': participant.campaign.share_phone_button or 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º', 'request_contact': True}]],
        'resize_keyboard': True
    }
    send_telegram_message(
        chat_id,
        f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {participant.first_name}! üì± *–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:",
        keyboard,
        parse_mode='Markdown'
    )


def handle_phone_stage(chat_id, campaign, participant, text):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É"""
    if not text.strip():
        send_telegram_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:")
        return

    # –ü—Ä–∏–≤–æ–¥–∏–º –Ω–æ–º–µ—Ä –∫ —Ñ–æ—Ä–º–∞—Ç—É +7...
    phone = re.sub(r'[^\d+]', '', text.strip())
    if phone.startswith('8'):
        phone = '+7' + phone[1:]
    elif not phone.startswith('+'):
        phone = '+' + phone

    participant.phone = phone
    participant.registration_stage = 'subscription'
    participant.save()

    ask_for_subscription(chat_id, campaign, participant)



def handle_contact(chat_id, user_id, phone, first_name, username, campaign):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    participant = Participant.objects.filter(
        telegram_id=user_id,
        registration_stage='phone'
    ).first()
    if not participant:
        send_telegram_message(chat_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è")
        return

    participant.phone = re.sub(r'[^\d+]', '', phone)
    participant.registration_stage = 'subscription'
    participant.save()
    ask_for_subscription(chat_id, campaign, participant)


def ask_for_subscription(chat_id, campaign, participant):
    """–ó–∞–ø—Ä–æ—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã —Å –∫–Ω–æ–ø–∫–æ–π"""
    channels = [ch.strip() for ch in campaign.channel_usernames.split(',') if ch.strip()]
    channels_text = "\n".join([f"‚Ä¢ {ch}" for ch in channels])
    keyboard = {
        'keyboard': [[{'text': campaign.conditions_button or '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'}]],
        'resize_keyboard': True
    }
    send_telegram_message(
        chat_id,
        f"üì¢ *–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã*\n\n{channels_text}\n\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:",
        keyboard,
        parse_mode='Markdown'
    )


def handle_subscription_stage(chat_id, user_id, campaign, participant):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    is_subscribed, failed_channels = check_user_subscription(user_id, campaign)
    if is_subscribed:
        participant.is_subscribed = True
        participant.registration_stage = 'completed'
        participant.save()
        keyboard = {
            'keyboard': [[{'text': campaign.button_text or 'üéØ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å'}]],
            'resize_keyboard': True
        }
        send_telegram_message(
            chat_id,
            f"üéâ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\nüë§ –ò–º—è: {participant.first_name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {participant.phone}",
            keyboard,
            parse_mode='Markdown'
        )
    else:
        failed_text = "\n".join([f"‚Ä¢ {ch}" for ch in failed_channels])
        keyboard = {
            'keyboard': [[{'text': campaign.conditions_button or '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'}]],
            'resize_keyboard': True
        }
        send_telegram_message(
            chat_id,
            f"‚ùå *–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!*\n\n–ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã:\n{failed_text}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞:",
            keyboard,
            parse_mode='Markdown'
        )


def check_user_subscription(user_id, campaign):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª—ã"""
    bot_token = os.getenv("BOT_TOKEN")
    channels = [ch.strip() for ch in campaign.channel_usernames.split(',') if ch.strip()]
    failed_channels = []
    for channel in channels:
        if not channel.startswith('@'):
            channel = '@' + channel
        url = f"https://api.telegram.org/bot{bot_token}/getChatMember"
        try:
            response = requests.get(url, params={'chat_id': channel, 'user_id': user_id}, timeout=10)
            data = response.json()
            if not data.get('ok') or data['result']['status'] not in ['member', 'administrator', 'creator']:
                failed_channels.append(channel)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {channel}: {e}")
            failed_channels.append(channel)
    return len(failed_channels) == 0, failed_channels


def send_telegram_message(chat_id, text, reply_markup=None, parse_mode=None):
    bot_token = os.getenv("BOT_TOKEN")
    data = {'chat_id': chat_id, 'text': text}
    if reply_markup:
        data['reply_markup'] = json.dumps(reply_markup)
    if parse_mode:
        data['parse_mode'] = parse_mode
    try:
        requests.post(f'https://api.telegram.org/bot{bot_token}/sendMessage', data=data)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
