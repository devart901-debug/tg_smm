import json
import requests
import re
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_POST
from .models import Campaign, Participant
import os
from dotenv import load_dotenv
load_dotenv()

@csrf_exempt
@require_POST
def telegram_webhook(request):
    """–í–µ–±—Ö—É–∫ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
    try:
        active_campaign = Campaign.objects.filter(
            status='active', 
            bot_is_running=True
        ).first()
        
        if not active_campaign:
            print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π —Å –∑–∞–ø—É—â–µ–Ω–Ω—ã–º –±–æ—Ç–æ–º")
            return JsonResponse({'ok': True})
        
        update = json.loads(request.body)
        print(f"üîÑ Received update –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏: {active_campaign.name}")
        
        if 'message' in update:
            message = update['message']
            chat_id = message['chat']['id']
            text = message.get('text', '')
            user_id = message['from']['id']
            first_name = message['from'].get('first_name', '')
            username = message['from'].get('username', '')
            
            print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {first_name}: {text}")
            
            if text == '/start':
                handle_start(chat_id, user_id, first_name, username, active_campaign)
            elif text == (active_campaign.button_text or 'üéØ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å'):
                handle_participate(chat_id, user_id, first_name, username, active_campaign)
            else:
                handle_user_message(chat_id, user_id, text, first_name, username, active_campaign)
        
        elif 'message' in update and 'contact' in update['message']:
            message = update['message']
            chat_id = message['chat']['id']
            user_id = message['from']['id']
            first_name = message['from'].get('first_name', '')
            username = message['from'].get('username', '')
            contact = message['contact']
            phone = contact.get('phone_number', '')
            
            print(f"üì± –ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç –æ—Ç {first_name}: {phone}")
            handle_contact(chat_id, user_id, phone, first_name, username, active_campaign)
                
    except Exception as e:
        print(f"‚ùå Error: {e}")
    
    return JsonResponse({'ok': True})

def handle_start(chat_id, user_id, first_name, username, campaign):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        keyboard = {
            'keyboard': [
                [{'text': campaign.button_text or 'üéØ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å'}]
            ],
            'resize_keyboard': True,
            'one_time_keyboard': False
        }
        
        send_telegram_message(
            chat_id, 
            campaign.first_message or '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
            keyboard
        )
        
        print(f"üîπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name} –Ω–∞—á–∞–ª –æ–±—â–µ–Ω–∏–µ")
        
    except Exception as e:
        print(f"‚ùå Error in handle_start: {e}")
        send_telegram_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

def handle_participate(chat_id, user_id, first_name, username, campaign):
    """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å"""
    try:
        Participant.objects.filter(
            telegram_id=user_id,
            registration_stage__in=['name', 'phone', 'subscription']
        ).delete()

        participant = Participant.objects.create(
            campaign=campaign,
            telegram_id=user_id,
            username=username,
            first_name=first_name,
            registration_stage='name'
        )
        
        send_telegram_message(
            chat_id, 
            "üìù *–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?*\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:",
            {'remove_keyboard': True},
            parse_mode='Markdown'
        )
        
        print(f"üîπ –ù–∞—á–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è {first_name}")
        
    except Exception as e:
        print(f"‚ùå Error in handle_participate: {e}")
        send_telegram_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

def handle_name_stage(chat_id, participant, text, campaign=None):
    if text.strip():
        participant.first_name = text.strip()
        participant.registration_stage = 'phone'
        participant.save()
        
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–º—è: {text}")
        
        keyboard = {
            'keyboard': [[
                {'text': campaign.share_phone_button or 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º', 'request_contact': True}
            ]],
            'resize_keyboard': True
        }
        
        send_telegram_message(
            chat_id, 
            f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {text.strip()}! üì± *–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*\n\n–ù–∞–º –Ω—É–∂–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏ –≤ —Å–ª—É—á–∞–µ –≤—ã–∏–≥—Ä—ã—à–∞.\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:", 
            keyboard,
            parse_mode='Markdown'
        )
    else:
        send_telegram_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

def handle_phone_stage(chat_id, campaign, participant, text):
    if text == (campaign.share_phone_button or 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º'):
        send_telegram_message(
            chat_id,
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '{campaign.share_phone_button or 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º'}' –∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä'",
            parse_mode='Markdown'
        )
        return
        
    if text.strip():
        phone_exists = Participant.objects.filter(
            campaign=campaign,
            phone=text.strip(),
            registration_stage='completed'
        ).exists()
        
        if phone_exists:
            send_telegram_message(
                chat_id,
                "‚ùå –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä:"
            )
            return
        
        participant.phone = text.strip()
        participant.registration_stage = 'subscription'
        participant.save()
        
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω: {text}")
        
        ask_for_subscription(chat_id, campaign, participant)
    else:
        send_telegram_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:")

def ask_for_subscription(chat_id, campaign, participant):
    """–ó–∞–ø—Ä–æ—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã"""
    try:
        channels = [ch.strip() for ch in campaign.channel_usernames.split(',') if ch.strip()]
        channels_text = "\n".join([f"‚Ä¢ {channel}" for channel in channels])
        
        keyboard = {
            'keyboard': [[{'text': campaign.conditions_button or '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'}]],
            'resize_keyboard': True
        }
        
        send_telegram_message(
            chat_id,
            f"üì¢ *–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã*\n\n{channels_text}\n\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:",
            keyboard,
            parse_mode='Markdown'
        )
        
        print(f"üîπ –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è {participant.first_name}")
        
    except Exception as e:
        print(f"‚ùå Error in ask_for_subscription: {e}")

def send_telegram_message(chat_id, text, reply_markup=None, parse_mode=None):
    bot_token = os.getenv("BOT_TOKEN")
    
    url = f'https://api.telegram.org/bot{bot_token}/sendMessage'
    data = {'chat_id': chat_id, 'text': text}
    
    if reply_markup:
        data['reply_markup'] = json.dumps(reply_markup)
    
    if parse_mode:
        data['parse_mode'] = parse_mode
    
    try:
        response = requests.post(url, data=data)
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {text[:50]}...")
        return response.json()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return None
