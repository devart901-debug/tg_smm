from django.contrib import admin
from django.http import HttpResponseRedirect
from django.urls import path
from django.utils.html import format_html
from django.contrib import messages
import sys
import subprocess
import time
from .models import Campaign, Participant

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤
running_bots = {}

@admin.register(Campaign)
class CampaignAdmin(admin.ModelAdmin):
    list_display = ['name', 'status', 'bot_status', 'participants_count', 'winners_count', 'export_excel_button', 'bot_actions']
    list_editable = ['status']
    list_filter = ['status', 'bot_is_running']
    prepopulated_fields = {'slug': ('name',)}
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('name', 'slug', 'status')
        }),
        ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram', {
            'fields': ('channel_usernames',)
        }),
        ('–¢–µ–∫—Å—Ç—ã –¥–ª—è –±–æ—Ç–∞', {
            'fields': (
                'first_message', 
                'conditions_text',
                'prizes_text'
            )
        }),
        ('–¢–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫', {
            'fields': (
                'button_text', 
                'conditions_button',
                'prizes_button',
                'share_phone_button'
            )
        }),
        ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞', {
            'fields': ('winners_count',)
        }),
        ('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º', {
            'fields': ('bot_is_running',),
            'classes': ('collapse',)
        }),
        ('–í–∏–∑—É–∞–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ', {
            'fields': ('theme_color',),
            'classes': ('collapse',)
        }),
    )
    
    # –£–ë–ò–†–ê–ï–ú –í–°–ï –°–õ–û–ñ–ù–´–ï –ü–†–û–í–ï–†–ö–ò –ü–†–ê–í –î–û–°–¢–£–ü–ê
    def has_delete_permission(self, request, obj=None):
        """–†–∞–∑—Ä–µ—à–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞"""
        return True
    
    def has_add_permission(self, request):
        """–†–∞–∑—Ä–µ—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
        return True

    def participants_count(self, obj):
        return obj.participants.count()
    participants_count.short_description = '–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤'
    
    def bot_status(self, obj):
        if obj.bot_is_running:
            return format_html('<span style="color: green;">‚óè –ó–∞–ø—É—â–µ–Ω</span>')
        else:
            return format_html('<span style="color: red;">‚óè –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</span>')
    bot_status.short_description = '–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞'
    
    def winners_count(self, obj):
        return len(obj.winners) if obj.winners else 0
    winners_count.short_description = '–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π'
    
    def export_excel_button(self, obj):
        return format_html(
            '<a class="button" href="{}" style="background-color: #17a2b8; color: white; padding: 5px 10px; text-decoration: none; border-radius: 3px; font-size: 12px;">üìä Excel</a>',
            f'/admin/campaigns/campaign/{obj.id}/download_excel/'
        )
    export_excel_button.short_description = '–≠–∫—Å–ø–æ—Ä—Ç'
    
    def bot_actions(self, obj):
        actions = []
        
        # –î–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø—É—Å–∫
        if obj.status == 'draft':
            actions.append(f'<a class="button" href="/admin/campaigns/campaign/{obj.id}/start_bot/" style="background-color: #28a745; color: white; padding: 5px 10px; text-decoration: none; border-radius: 3px; font-size: 12px; margin: 2px;">–ó–∞–ø—É—Å—Ç–∏—Ç—å</a>')
        
        # –î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π - –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏–π
        elif obj.status == 'active':
            if obj.bot_is_running:
                actions.append(f'<a class="button" href="/admin/campaigns/campaign/{obj.id}/stop_bot/" style="background-color: #dc3545; color: white; padding: 5px 10px; text-decoration: none; border-radius: 3px; font-size: 12px; margin: 2px;">–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</a>')
                actions.append(f'<a class="button" href="/admin/campaigns/campaign/{obj.id}/restart_bot/" style="background-color: #ffc107; color: black; padding: 5px 10px; text-decoration: none; border-radius: 3px; font-size: 12px; margin: 2px;">–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å</a>')
            else:
                actions.append(f'<a class="button" href="/admin/campaigns/campaign/{obj.id}/start_bot/" style="background-color: #28a745; color: white; padding: 5px 10px; text-decoration: none; border-radius: 3px; font-size: 12px; margin: 2px;">–ó–∞–ø—É—Å—Ç–∏—Ç—å</a>')
            
            # –†–æ–∑—ã–≥—Ä—ã—à –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –±–µ–∑ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
            if not obj.winners:
                actions.append(f'<a class="button" href="/admin/campaigns/campaign/{obj.id}/raffle/" style="background-color: #ff6b35; color: white; padding: 5px 10px; text-decoration: none; border-radius: 3px; font-size: 12px; margin: 2px;">–†–æ–∑—ã–≥—Ä—ã—à</a>')
        
        # –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
        elif obj.status == 'finished':
            if not obj.winners:
                actions.append(f'<a class="button" href="/admin/campaigns/campaign/{obj.id}/raffle/" style="background-color: #ff6b35; color: white; padding: 5px 10px; text-decoration: none; border-radius: 3px; font-size: 12px; margin: 2px;">–†–æ–∑—ã–≥—Ä—ã—à</a>')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏
        if obj.winners:
            actions.append(f'<a class="button" href="/admin/campaigns/campaign/{obj.id}/show_winners/" style="background-color: #6f42c1; color: white; padding: 5px 10px; text-decoration: none; border-radius: 3px; font-size: 12px; margin: 2px;">üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏</a>')
        
        if actions:
            return format_html(''.join(actions))
        else:
            return "-"
    
    bot_actions.short_description = '–î–µ–π—Å—Ç–≤–∏—è'
    
    def get_urls(self):
        urls = super().get_urls()
        custom_urls = [
            path('<path:object_id>/start_bot/', self.start_bot, name='start_bot'),
            path('<path:object_id>/stop_bot/', self.stop_bot, name='stop_bot'),
            path('<path:object_id>/restart_bot/', self.restart_bot, name='restart_bot'),
            path('<path:object_id>/raffle/', self.start_raffle, name='raffle'),
            path('<path:object_id>/show_winners/', self.show_winners, name='show_winners'),
            path('<path:object_id>/download_excel/', self.export_excel, name='export_excel'),
        ]
        return custom_urls + urls
    
    def start_bot(self, request, object_id):
        try:
            campaign = Campaign.objects.get(id=object_id)
            
            # –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê
            if campaign.status != 'active':
                messages.error(request, 
                    f'–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞! –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "{campaign.name}" –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å "{campaign.get_status_display()}". '
                    f'–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–ê–∫—Ç–∏–≤–Ω–æ".'
                )
                return HttpResponseRedirect('/admin/campaigns/campaign/')
            
            # –ü–†–û–í–ï–†–ö–ê: –£–∂–µ –µ—Å—Ç—å –∑–∞–ø—É—â–µ–Ω–Ω—ã–π –±–æ—Ç?
            active_bots = Campaign.objects.filter(bot_is_running=True).exclude(id=campaign.id)
            if active_bots.exists():
                active_campaign = active_bots.first()
                messages.error(request, 
                    f'–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞! '
                    f'–£–∂–µ –∑–∞–ø—É—â–µ–Ω –±–æ—Ç –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è "{active_campaign.name}". '
                    f'–°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ, –∑–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–π—Ç–µ –Ω–æ–≤—ã–π.'
                )
                return HttpResponseRedirect('/admin/campaigns/campaign/')
            
            if campaign.bot_is_running:
                messages.warning(request, f'–ë–æ—Ç –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è "{campaign.name}" —É–∂–µ –∑–∞–ø—É—â–µ–Ω!')
            else:
                # –ó–ê–ü–£–°–ö–ê–ï–ú –ß–ï–†–ï–ó –í–ï–ë–•–£–ö (–∞ –Ω–µ subprocess)
                success = campaign.start_bot()
                
                if success:
                    messages.success(request, f'–ë–æ—Ç –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è "{campaign.name}" —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω (–≤–µ–±—Ö—É–∫)!')
                else:
                    messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫!')
                    
        except Campaign.DoesNotExist:
            messages.error(request, '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!')
        except Exception as e:
            messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}')
        
        return HttpResponseRedirect('/admin/campaigns/campaign/')

    def stop_bot(self, request, object_id):
        try:
            campaign = Campaign.objects.get(id=object_id)
            
            if campaign.bot_is_running:
                # –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ß–ï–†–ï–ó –í–ï–ë–•–£–ö
                success = campaign.stop_bot()
                
                if success:
                    messages.success(request, f'–ë–æ—Ç –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è "{campaign.name}" –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')
                else:
                    messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞!')
            else:
                messages.warning(request, f'–ë–æ—Ç –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è "{campaign.name}" –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω!')
                
        except Campaign.DoesNotExist:
            messages.error(request, '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!')
        except Exception as e:
            messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {str(e)}')
        
        return HttpResponseRedirect('/admin/campaigns/campaign/')

    def restart_bot(self, request, object_id):
        try:
            campaign = Campaign.objects.get(id=object_id)
            
            if campaign.bot_is_running:
                # –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
                campaign.stop_bot()
                time.sleep(2)
                # –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º
                success = campaign.start_bot()
                
                if success:
                    messages.success(request, f'–ë–æ—Ç –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è "{campaign.name}" —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!')
                else:
                    messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞!')
            else:
                messages.warning(request, f'–ë–æ—Ç –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è "{campaign.name}" –Ω–µ –∑–∞–ø—É—â–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–ø—É—Å—Ç–∏—Ç—å".')
                
        except Campaign.DoesNotExist:
            messages.error(request, '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!')
        except Exception as e:
            messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}')
        
        return HttpResponseRedirect('/admin/campaigns/campaign/')

    def start_raffle(self, request, object_id):
        try:
            campaign = Campaign.objects.get(id=object_id)
            
            # üî¥ –ü–†–û–í–ï–†–Ø–ï–ú –ï–°–¢–¨ –õ–ò –£–ñ–ï –ü–û–ë–ï–î–ò–¢–ï–õ–ò
            if campaign.winners:
                messages.error(request, f'–†–æ–∑—ã–≥—Ä—ã—à —É–∂–µ –ø—Ä–æ–≤–æ–¥–∏–ª—Å—è –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è "{campaign.name}"!')
                return HttpResponseRedirect('/admin/campaigns/campaign/')
            
            # üî¥ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –†–û–ó–´–ì–†–´–®–ê
            if 'confirm' not in request.GET:
                participants_count = campaign.participants.filter(is_subscribed=True).count()
                confirm_message = (
                    f'–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ä–æ–∑—ã–≥—Ä—ã—à –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è "<strong>{campaign.name}</strong>"?\n\n'
                    f'üìä –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}\n'
                    f'üèÜ –ë—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {campaign.winners_count}\n\n'
                    f'<strong>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!</strong>'
                )
                messages.warning(request, format_html(confirm_message))
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                confirm_url = f'/admin/campaigns/campaign/{object_id}/raffle/?confirm=true'
                cancel_url = '/admin/campaigns/campaign/'
                
                messages.info(request, format_html(
                    f'<a class="button" href="{confirm_url}" style="background-color: #28a745; color: white; padding: 8px 15px; text-decoration: none; border-radius: 5px; margin: 5px;">‚úÖ –î–∞, –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ä–æ–∑—ã–≥—Ä—ã—à</a>'
                    f'<a class="button" href="{cancel_url}" style="background-color: #dc3545; color: white; padding: 8px 15px; text-decoration: none; border-radius: 5px; margin: 5px;">‚ùå –û—Ç–º–µ–Ω–∞</a>'
                ))
                return HttpResponseRedirect('/admin/campaigns/campaign/')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à
            if campaign.status not in ['active', 'finished']:
                messages.error(request, 
                    f'–†–æ–∑—ã–≥—Ä—ã—à –º–æ–∂–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π! '
                    f'–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: "{campaign.get_status_display()}"'
                )
                return HttpResponseRedirect('/admin/campaigns/campaign/')
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à
            result = subprocess.run([
                sys.executable, 'manage.py', 'raffle', campaign.slug, '--winners', str(campaign.winners_count)
            ], capture_output=True, text=True)
            
            if result.returncode == 0:
                messages.success(request, f'–†–æ–∑—ã–≥—Ä—ã—à –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è "{campaign.name}" –ø—Ä–æ–≤–µ–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                campaign.refresh_from_db()
                if campaign.winners:
                    # üî¥ –ü–û–ö–ê–ó–´–í–ê–ï–ú –ü–û–ë–ï–î–ò–¢–ï–õ–ï–ô –°–†–ê–ó–£ –ü–û–°–õ–ï –†–û–ó–´–ì–†–´–®–ê
                    winners_text = "üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:\n\n"
                    for winner in campaign.winners:
                        winners_text += f"{winner['place']}. {winner['name']} - {winner['phone']}\n"
                    messages.info(request, winners_text)
            else:
                messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {result.stderr}')
            
        except Campaign.DoesNotExist:
            messages.error(request, '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!')
        except Exception as e:
            messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {str(e)}')
        
        return HttpResponseRedirect('/admin/campaigns/campaign/')
    
    def show_winners(self, request, object_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –≤ –∫—Ä–∞—Å–∏–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        try:
            campaign = Campaign.objects.get(id=object_id)
            if campaign.winners:
                # üî¥ –°–û–ó–î–ê–ï–ú –ö–†–ê–°–ò–í–´–ô –°–ü–ò–°–û–ö –ü–û–ë–ï–î–ò–¢–ï–õ–ï–ô
                winners_html = f"""
                <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin: 10px 0;">
                    <h3 style="color: #6f42c1; margin-top: 0;">üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è "{campaign.name}"</h3>
                    <div style="max-height: 400px; overflow-y: auto;">
                        <table style="width: 100%; border-collapse: collapse;">
                            <thead>
                                <tr style="background: #6f42c1; color: white;">
                                    <th style="padding: 10px; text-align: left; width: 60px;">–ú–µ—Å—Ç–æ</th>
                                    <th style="padding: 10px; text-align: left;">–ò–º—è</th>
                                    <th style="padding: 10px; text-align: left;">–¢–µ–ª–µ—Ñ–æ–Ω</th>
                                    <th style="padding: 10px; text-align: left;">Username</th>
                                </tr>
                            </thead>
                            <tbody>
                """
                
                for winner in campaign.winners:
                    winners_html += f"""
                                <tr style="border-bottom: 1px solid #dee2e6;">
                                    <td style="padding: 10px; font-weight: bold;">{winner['place']}</td>
                                    <td style="padding: 10px;">{winner['name']}</td>
                                    <td style="padding: 10px;">{winner['phone']}</td>
                                    <td style="padding: 10px;">{winner.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω')}</td>
                                </tr>
                    """
                
                winners_html += """
                            </tbody>
                        </table>
                    </div>
                    <p style="margin: 10px 0 0 0; color: #6c757d; font-size: 14px;">
                        –î–∞—Ç–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: """ + (campaign.raffle_date.strftime('%d.%m.%Y %H:%M') if campaign.raffle_date else '–ù–µ —É–∫–∞–∑–∞–Ω–∞') + """
                    </p>
                </div>
                """
                
                messages.success(request, format_html(winners_html))
            else:
                messages.warning(request, f"‚ùå –î–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è '{campaign.name}' —Ä–æ–∑—ã–≥—Ä—ã—à –µ—â–µ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª—Å—è!")
        except Campaign.DoesNotExist:
            messages.error(request, '‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!')
        
        return HttpResponseRedirect('/admin/campaigns/campaign/')
    
    def export_excel(self, request, object_id):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel"""
        from .views import export_participants_excel
        return export_participants_excel(request, object_id)

@admin.register(Participant)
class ParticipantAdmin(admin.ModelAdmin):
    list_display = ['first_name', 'phone', 'campaign', 'is_subscribed', 'created_at']
    list_filter = ['campaign', 'is_subscribed', 'created_at']
    search_fields = ['first_name', 'phone', 'username']
    readonly_fields = ['created_at']

admin.site.site_header = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Telegram –±–æ—Ç–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"
admin.site.site_title = "–ê–¥–º–∏–Ω–∫–∞ –±–æ—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"
admin.site.index_title = "–ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"