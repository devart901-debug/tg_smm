from django.db import models
from django.utils import timezone
import os
from dotenv import load_dotenv
load_dotenv()


class Campaign(models.Model):
    STATUS_CHOICES = [
        ('draft', '–ß–µ—Ä–Ω–æ–≤–∏–∫'),
        ('active', '–ê–∫—Ç–∏–≤–Ω–æ'),
        ('finished', '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'), 
        ('raffled', '–†–æ–∑—ã–≥—Ä—ã—à –ø—Ä–æ–≤–µ–¥–µ–Ω'),
    ]
    
    name = models.CharField('–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', max_length=200)
    slug = models.SlugField('URL –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä', unique=True)
    status = models.CharField('–°—Ç–∞—Ç—É—Å', max_length=10, choices=STATUS_CHOICES, default='draft')
    channel_usernames = models.CharField('Username –∫–∞–Ω–∞–ª–∞', max_length=100, default='@test_channel')
    
    first_message = models.TextField(
        '–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞', 
        default='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ.'
    )
    welcome_text = models.TextField('–¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è', default='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!')
    button_text = models.CharField('–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏', max_length=50, default='üéØ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ')
    
    # –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
    bot_is_running = models.BooleanField('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω', default=False)


    
    theme_color = models.CharField('–¶–≤–µ—Ç —Ç–µ–º—ã', max_length=7, default='#FF6B35')
    
     # –ù–û–í–´–ï –ü–û–õ–Ø:
    conditions_text = models.TextField(
        '–¢–µ–∫—Å—Ç —É—Å–ª–æ–≤–∏–π –∞–∫—Ü–∏–∏', 
        default='–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n‚Ä¢ –ë—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª\n‚Ä¢ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n‚Ä¢ –°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö'
    )
    prizes_text = models.TextField(
        '–¢–µ–∫—Å—Ç –ø—Ä–∏–∑–æ–≤', 
        default='üèÜ –ì–ª–∞–≤–Ω—ã–µ –ø—Ä–∏–∑—ã:\n‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω—à–µ—Ç\n‚Ä¢ –ù–∞–±–æ—Ä –¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤\n‚Ä¢ –ì–æ–¥–æ–≤–æ–π –∫—É—Ä—Å –ø–æ –¥–∏–∑–∞–π–Ω—É'
    )
    share_phone_button = models.CharField(
        '–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º"', 
        max_length=50, 
        default='üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º'
    )
    conditions_button = models.CharField(
        '–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"', 
        max_length=50, 
        default='‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'
    )
    prizes_button = models.CharField(
        '–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–∑—ã"', 
        max_length=50, 
        default='üéÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–∑—ã'
    )

     # –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞
    winners_count = models.IntegerField('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π', default=1)
    winners = models.JSONField('–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏', default=list, blank=True)  # –•—Ä–∞–Ω–∏–º —Å–ø–∏—Å–æ–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
    raffle_date = models.DateTimeField('–î–∞—Ç–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞', null=True, blank=True)
    
    # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
    channel_usernames = models.TextField(
        'Usernames –∫–∞–Ω–∞–ª–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)', 
        default='@test_channel',
        help_text='–£–∫–∞–∂–∏—Ç–µ usernames –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: @channel1, @channel2'
    )

    registration_stage = models.CharField(
        '–°—Ç–∞–¥–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', 
        max_length=20, 
        default='start',
        choices=[
            ('start', '–ù–∞—á–∞–ª–æ'),
            ('name', '–í–≤–æ–¥ –∏–º–µ–Ω–∏'),
            ('phone', '–í–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞'),
            ('subscription', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏'),
            ('completed', '–ó–∞–≤–µ—Ä—à–µ–Ω–æ')
        ]
    )

    def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫"""
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–ø—É—Å–∫–∞
            self.bot_is_running = True
            self.save()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –≤ Telegram
            bot_token = os.getenv("BOT_TOKEN")
            webhook_url = os.getenv("WEBHOOK_URL")
            
            import requests
            response = requests.post(
                f"https://api.telegram.org/bot{bot_token}/setWebhook",
                data={'url': webhook_url}
            )
            
            if response.status_code == 200:
                print(f"‚úÖ –í–µ–±—Ö—É–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –±–æ—Ç–∞")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞: {response.text}")
                self.bot_is_running = False
                self.save()
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            self.bot_is_running = False
            self.save()
            return False

    def stop_bot(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ - –æ—Ç–∫–ª—é—á–∞–µ–º –≤–µ–±—Ö—É–∫"""
        try:
            self.bot_is_running = False
            self.save()
            
            # –û—Ç–∫–ª—é—á–∞–µ–º –≤–µ–±—Ö—É–∫ –≤ Telegram
            bot_token = os.getenv("BOT_TOKEN")
            
            import requests
            response = requests.post(
                f"https://api.telegram.org/bot{bot_token}/deleteWebhook"
            )
            
            print(f"‚úÖ –í–µ–±—Ö—É–∫ –æ—Ç–∫–ª—é—á–µ–Ω")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {e}")
            return False

    def bot_status(self):
        """–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
        if self.bot_is_running:
            return "üü¢ –ó–∞–ø—É—â–µ–Ω (–≤–µ–±—Ö—É–∫)"
        else:
            return "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

    class Meta:
        verbose_name = '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ'
        verbose_name_plural = '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'

    def __str__(self):
        return self.name
    
    def is_active(self):
        return self.status == 'active'
    
    def participants_count(self):
        return self.participants.count()
    participants_count.short_description = '–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤'

class Participant(models.Model):
    campaign = models.ForeignKey(Campaign, on_delete=models.CASCADE, related_name='participants', verbose_name='–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ')
    telegram_id = models.BigIntegerField('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram')
    username = models.CharField('Username', max_length=100, blank=True)
    first_name = models.CharField('–ò–º—è', max_length=100)
    phone = models.CharField('–¢–µ–ª–µ—Ñ–æ–Ω', max_length=20)
    is_subscribed = models.BooleanField('–ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª', default=False)
    created_at = models.DateTimeField('–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', auto_now_add=True)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    registration_stage = models.CharField(
        '–°—Ç–∞–¥–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
        max_length=20,
        default='start',
        choices=[
            ('start', '–ù–∞—á–∞–ª–æ'),
            ('name', '–í–≤–æ–¥ –∏–º–µ–Ω–∏'),
            ('phone', '–í–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞'),
            ('subscription', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏'),
            ('completed', '–ó–∞–≤–µ—Ä—à–µ–Ω–æ')
        ]
    )
    
    class Meta:
        verbose_name = '–£—á–∞—Å—Ç–Ω–∏–∫'
        verbose_name_plural = '–£—á–∞—Å—Ç–Ω–∏–∫–∏'
        unique_together = ['campaign', 'telegram_id']

    def __str__(self):
        return f"{self.first_name} - {self.campaign.name}"