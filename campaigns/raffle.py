import random
from django.core.management.base import BaseCommand
from django.utils import timezone
from campaigns.models import Campaign, Participant

class Command(BaseCommand):
    help = '–ü—Ä–æ–≤–µ—Å—Ç–∏ —Ä–æ–∑—ã–≥—Ä—ã—à —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'
    
    def add_arguments(self, parser):
        parser.add_argument('campaign_slug', type=str, help='Slug –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
        parser.add_argument('--winners', type=int, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π', default=1)
    
    def handle(self, *args, **options):
        campaign_slug = options['campaign_slug']
        winners_count = options['winners']
        
        try:
            campaign = Campaign.objects.get(slug=campaign_slug)
            participants = Participant.objects.filter(campaign=campaign, is_subscribed=True)
            
            self.stdout.write(f"–†–û–ó–´–ì–†–´–® –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {campaign.name}")
            self.stdout.write(f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants.count()}")
            self.stdout.write(f"–ë—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {winners_count}")
            
            # üî¥ –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ë–û–¢–ê –ü–ï–†–ï–î –†–û–ó–´–ì–†–´–®–ï–ú
            if campaign.bot_is_running:
                self.stdout.write("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º...")
                campaign.bot_is_running = False
                campaign.save()
            
            if participants.count() < winners_count:
                self.stdout.write("–û–®–ò–ë–ö–ê: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞!")
                return
            
            if campaign.winners:
                self.stdout.write("–û–®–ò–ë–ö–ê: –†–æ–∑—ã–≥—Ä—ã—à —É–∂–µ –ø—Ä–æ–≤–æ–¥–∏–ª—Å—è –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!")
                return
            
            winners = random.sample(list(participants), winners_count)
            
            winners_data = []
            for i, winner in enumerate(winners, 1):
                winner_data = {
                    'place': i,
                    'name': winner.first_name,
                    'phone': winner.phone,
                    'telegram_id': winner.telegram_id,
                    'username': winner.username or '–ù–µ —É–∫–∞–∑–∞–Ω'
                }
                winners_data.append(winner_data)
                self.stdout.write(f"{i}. {winner.first_name} - {winner.phone} (@{winner.username})")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–º–ø–∞–Ω–∏—é
            campaign.winners = winners_data
            campaign.raffle_date = timezone.now()
            campaign.status = 'raffled'
            campaign.bot_is_running = False  # üî¥ –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —á—Ç–æ –±–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω
            campaign.save()
            
            self.stdout.write(f"–†–û–ó–´–ì–†–´–® –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É.")
            
        except Campaign.DoesNotExist:
            self.stdout.write(f"–û–®–ò–ë–ö–ê: –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{campaign_slug}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        except Exception as e:
            self.stdout.write(f"–û–®–ò–ë–ö–ê: {e}")